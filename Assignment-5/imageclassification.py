# -*- coding: utf-8 -*-
"""imageclassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P9vpy6wcqO6BHO-pbazSTodO4EUzdUIv

**From uper Menu choose:**
---
Runtime --> Change runtime type:
---
change Hardare accelerator to (gpu)
"""

from keras import Sequential
from keras.datasets import mnist
import numpy as np
from keras.layers import Dense
from tensorflow.keras.utils import to_categorical

(train_images,train_labels),(test_images, test_labels) = mnist.load_data()

print(type(train_images))
print(train_images.shape)
print(train_images[251].shape)

"""#process the data
#1. convert each image of shape 28*28 to 784 dimensional which will be fed to the network as a single feature
"""

dimData = np.prod(train_images.shape[1:])
print(dimData)
train_data = train_images.reshape(train_images.shape[0],dimData)
test_data = test_images.reshape(test_images.shape[0],dimData)
print(train_data.shape)

"""#convert data to float and scale values between 0 and 1"""

train_data = train_data.astype('float')
test_data = test_data.astype('float')

"""#scale data"""

train_data /=255.0
test_data /=255.0

"""change the labels frominteger to one-hot encoding. to_categorical is doing the same thing as LabelEncoder()"""

train_labels_one_hot = to_categorical(train_labels)


test_labels_one_hot = to_categorical(test_labels)

print(train_labels_one_hot[0])

"""#creating network"""

model = Sequential()
model.add(Dense(512, activation='relu', input_shape=(dimData,)))
model.add(Dense(512, activation='relu'))
model.add(Dense(10, activation='softmax'))

model.summary()

"""# Compile model"""

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

"""# Fit model"""

history = model.fit(train_data, train_labels_one_hot, batch_size=256, epochs=10, verbose=0)

import matplotlib.pyplot as plt

plt.plot(history.history['loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train'], loc='upper right')
plt.show()

plt.plot(history.history['accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train'], loc='upper left')
plt.show()

# plt.imshow(test_data[0].reshape([28,28])) # test_images.reshape(test_images.shape[0],dimData)
plt.imshow(test_images[1])

res = model.predict(test_data[1:2])

# print(res)
print(res.argmax()) # Returns the indices of the maximum values along an axis.